{"version":3,"sources":["contract_config/contract-config.js","views/Farms/components/nftCard.tsx","eater.gif","views/Farms/Farms.jsx"],"names":["legendsLaboratory","legendsNFT","legendsToken","legendsMarketplace","legendsMatchingBoard","StyledCard","styled","Card","NftCard","children","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","lab","read","Contract","LegendsLaboratory","abi","write","token","LegendToken","nft","LegendsNFT","marketplace","LegendsMarketplace","matchingBoard","LegendsMatchingBoard","FarmsApp","useState","id","setID","sellPrice","setPrice","parent1","setParent1","parent2","setParent2","value","setValue","season","setSeasonValue","legends","setLegends","gettingLegends","setGettingLegends","setDuration","_startingPrice","setStartingPrice","toggleInstantBuy","instantPrice","setInstantPrice","matchingPrice","setMatchingPrice","setBreedingToken","bid","setBid","promoName","setPromoName","a","createPromoEvent","request","method","fetchTotalPromoCount","totalPromos","i","fetchPromoEvent","then","p","console","log","startTime","expireTime","isUnrestricted","promoClosed","ticketsClaimed","ticketsRedeemed","account","dispensePromoTicket","redeemPromoTicket","fetchRedeemableTickets","closePromoEvent","unixTime","setIncubationDuration","setBreedingCooldown","setOffspringLimit","setBaseBreedingCost","setSeason","fetchLegendURI","legendURI","fetchLegendMetadata","legendMeta","prefix","postfix","parents","birthDay","blendingCost","blendingInstancesUsed","offspringLimit","legendCreator","breedingCooldown","isLegendary","isHatched","legendGenetics","legendStats","forEach","legend","legendMetadata","tokenID","isHatchable","res","toString","axios","post","data","hatchedURI","hatch","totalSupply","totalLegends","isDestroyed","loadLegends","balanceOf","balance","legendsData","tokenOfOwnerByIndex","push","imgURL","generateImage","newItemId","tokenMeta","legendInterface","genetics","incubationDuration","breedingCost","url","skipIncubation","breed","once","event","destroyLegend","mintPromo","approve","price","utils","parseUnits","createLegendSale","transaction","wait","legendListing","listing","buyLegend","cancelLegendListing","l","auctionDetails","offerDetails","o","listingId","createdAt","nftContract","legendId","seller","buyer","isAuction","isOffer","status","duration","startingPrice","highestBid","highestBidder","bidders","instantBuy","expirationTime","legendOwner","isAccepted","payments","payment","approveTransaction","_instantPrice","createLegendAuction","auctionBid","placeBid","withdrawBid","closeListing","fetchBidders","b","length","makeLegendOffer","decideLegendOffer","claimRoyalties","create","createLegendMatching","legendMatching","matching","amount","cancelLegendMatching","m","matchingId","surrogateToken","surrogate","breeder","breederToken","childId","checkTokensOwed","tokensOwed","claimTokens","claimEgg","withdrawFromMatching","relistInMatching","NftContainer","div","type","placeholder","onChange","e","target","onClick","map","width","alt","src","cid","split","gif"],"mappings":"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","file":"static/js/6.js","sourcesContent":["\n    const legendsLaboratory = \"0xE2c1B3afF5D45A45A6bf20eF0476eB780055Dbc3\"\n    const legendsNFT = \"0xb41B3b60573D109f491EA99a73Ab423B8A868BbB\"\n    const legendsToken = \"0x6F84E7ACdCeE6e27BCd51480E3f73B0f5df361A5\"\n    const legendsRejuvination = \"0xA9127b2d9C3241e0A2191aa0C8E9f12453841bc0\"\n    const legendsMarketplace = \"0x8226E3BAAa20AC9C0BDB1E2fe14EA0BC4DAf3c58\"\n    const legendsMatchingBoard = \"0x16f85C3dB0e5d2dcc197cA94FBEe7e5F66A91455\"\n\n    export { legendsLaboratory, legendsNFT, legendsToken, legendsRejuvination, legendsMarketplace, legendsMatchingBoard }\n    ","import { Card } from '@legendarylabs/uikit'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledCard = styled(Card)`\r\n  & {\r\n    width: 300px;\r\n    text-align: center;\r\n    padding-top: 25px;\r\n    img {\r\n      padding: 25px;\r\n    }\r\n  }\r\n`\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const NftCard: React.FC = ({ children }) => {\r\n  return <StyledCard>{children}</StyledCard>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/eater.d5a2b2ca.gif\";","import { React, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport axios from 'axios'\r\nimport styled from 'styled-components'\r\nimport { AddressZero } from 'ethers/constants'\r\nimport {\r\n  legendsLaboratory,\r\n  legendsNFT,\r\n  legendsToken,\r\n  legendsMarketplace,\r\n  legendsMatchingBoard,\r\n} from 'contract_config/contract-config'\r\nimport LegendsNFT from '../../artifacts/contracts/legend/LegendsNFT.sol/LegendsNFT.json'\r\nimport LegendsMarketplace from '../../artifacts/contracts/marketplace/LegendsMarketplace.sol/LegendsMarketplace.json'\r\nimport LegendsMatchingBoard from '../../artifacts/contracts/matching/LegendsMatchingBoard.sol/LegendsMatchingBoard.json'\r\nimport LegendsLaboratory from '../../artifacts/contracts/lab/LegendsLaboratory.sol/LegendsLaboratory.json'\r\nimport LegendToken from '../../artifacts/contracts/token/LegendToken.sol/LegendToken.json'\r\nimport { NftCard } from './components/nftCard'\r\nimport gif from '../../eater.gif'\r\n\r\nconst provider = new ethers.providers.Web3Provider(window.ethereum)\r\nconst signer = provider.getSigner()\r\n\r\nconst contract = {\r\n  lab: {\r\n    read: new ethers.Contract(legendsLaboratory, LegendsLaboratory.abi, provider),\r\n    write: new ethers.Contract(legendsLaboratory, LegendsLaboratory.abi, signer),\r\n  },\r\n  token: {\r\n    read: new ethers.Contract(legendsToken, LegendToken.abi, provider),\r\n    write: new ethers.Contract(legendsToken, LegendToken.abi, signer),\r\n  },\r\n  nft: {\r\n    read: new ethers.Contract(legendsNFT, LegendsNFT.abi, provider),\r\n    write: new ethers.Contract(legendsNFT, LegendsNFT.abi, signer),\r\n  },\r\n  marketplace: {\r\n    read: new ethers.Contract(legendsMarketplace, LegendsMarketplace.abi, provider),\r\n    write: new ethers.Contract(legendsMarketplace, LegendsMarketplace.abi, signer),\r\n  },\r\n  matchingBoard: {\r\n    read: new ethers.Contract(legendsMatchingBoard, LegendsMatchingBoard.abi, provider),\r\n    write: new ethers.Contract(legendsMatchingBoard, LegendsMatchingBoard.abi, signer),\r\n  },\r\n}\r\n\r\nfunction FarmsApp() {\r\n  const [id, setID] = useState(0)\r\n  const [sellPrice, setPrice] = useState(0)\r\n  const [parent1, setParent1] = useState(0)\r\n  const [parent2, setParent2] = useState(0)\r\n  const [value, setValue] = useState(0)\r\n  const [season, setSeasonValue] = useState('')\r\n  const [newURI, setURI] = useState('')\r\n  const [legends, setLegends] = useState([])\r\n  const [bidders, setBidders] = useState([])\r\n  const [gettingLegends, setGettingLegends] = useState(false)\r\n  const [_duration, setDuration] = useState(0)\r\n  const [_startingPrice, setStartingPrice] = useState(0)\r\n  const [instantBuy, toggleInstantBuy] = useState(false)\r\n  const [instantPrice, setInstantPrice] = useState(0)\r\n  const [matchingPrice, setMatchingPrice] = useState(0)\r\n  const [breedingToken, setBreedingToken] = useState(0)\r\n  const [bid, setBid] = useState(0)\r\n  const [promoName, setPromoName] = useState('')\r\n  // const [amount, setAmount] = useState(0)\r\n\r\n  /**\r\n   * Admin Start\r\n   */\r\n  async function createPromoEvent() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.lab.write.createPromoEvent(promoName, 86400, false, 0, false)\r\n    }\r\n  }\r\n  async function fetchPromoDetails() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n\r\n      const totalPromos = await contract.lab.read.fetchTotalPromoCount()\r\n\r\n      for (let i = 1; i <= totalPromos; i++) {\r\n        contract.lab.read.fetchPromoEvent(i).then((p) => {\r\n          console.log(`Promo: ${p.promoName}`)\r\n          console.log(`Start Time: ${p.startTime}`)\r\n          console.log(`Expire Time: ${p.expireTime}`)\r\n          console.log(`Unrestricted: ${p.isUnrestricted}`)\r\n          console.log(`Closed: ${p.promoClosed}`)\r\n          console.log(`Tickets Claimed: ${p.ticketsClaimed}`)\r\n          console.log(`Tickets Redeemed: ${p.ticketsRedeemed}`)\r\n          console.log('')\r\n        })\r\n      }\r\n    }\r\n  }\r\n  async function dispensePromoTicket() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.dispensePromoTicket(id, account, 1)\r\n    }\r\n  }\r\n  async function redeemPromoTicket() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.redeemPromoTicket(\r\n        id,\r\n        account\r\n      )\r\n    }\r\n  }\r\n  async function fetchRedeemableTickets() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n\r\n      const totalPromos = await contract.lab.read.fetchTotalPromoCount()\r\n      // const amount = async await contract.lab.read.fetchRedeemableTickets(id, account)\r\n      // console.log(amount)\r\n\r\n      for (let i = 1; i <= totalPromos; i++) {\r\n        // contract.lab.read.fetchPromoEvent(i)\r\n        contract.lab.read.fetchRedeemableTickets(i, account).then((p) => {\r\n          // const amount = contract.lab.read.fetchRedeemableTickets(i, account)\r\n          console.log(`Tickets Owned: ${p}`)\r\n          console.log('')\r\n        })\r\n      }\r\n    }\r\n  }\r\n  async function closePromoEvent() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.lab.write.closePromoEvent(id)\r\n    }\r\n  }\r\n  async function setIncubationDuration() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      const unixTime = value * 86400\r\n      await contract.lab.write.setIncubationDuration(unixTime)\r\n    }\r\n  }\r\n  async function setBreedingCooldown() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.setBreedingCooldown(value)\r\n    }\r\n  }\r\n  async function setOffspringLimit() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.setOffspringLimit(value)\r\n    }\r\n  }\r\n  async function setBaseBreedingCost() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.setBaseBreedingCost(value)\r\n    }\r\n  }\r\n  async function setSeason() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.lab.write.setSeason(season)\r\n    }\r\n  }\r\n  /**\r\n   * Admin End\r\n   */\r\n\r\n  /**\r\n   * Legend NFT Start\r\n   */\r\n  async function fetchURI() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const legendURI = await contract.nft.read.fetchLegendURI(id)\r\n      console.log('IPFS URI: ', legendURI)\r\n    }\r\n  }\r\n  async function fetchLegendComposition() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const legendMeta = await contract.nft.read.legendMetadata(id) // doesn't return parents for some reason\r\n      const legendMeta = await contract.nft.read.fetchLegendMetadata(id)\r\n      // const legendGenetics = await contract.nft.read.legendGenetics(id)\r\n      // const legendStats = await contract.nft.read.legendStats(id)\r\n      console.log('META:')\r\n      console.log(`id: ${legendMeta.id}`)\r\n      console.log(`season: ${legendMeta.season}`)\r\n      console.log(`prefix: ${legendMeta.prefix}`)\r\n      console.log(`postfix: ${legendMeta.postfix}`)\r\n      console.log(`parents: ${legendMeta.parents}`)\r\n      console.log(`birthday: ${legendMeta.birthDay}`)\r\n      console.log(`blending cost: ${legendMeta.blendingCost}`)\r\n      console.log(`blending instances used: ${legendMeta.blendingInstancesUsed}`)\r\n      console.log(`total offspring: ${legendMeta.offspringLimit}`)\r\n      console.log(`legend creator: ${legendMeta.legendCreator}`)\r\n      console.log(`breeding cooldown: ${legendMeta.breedingCooldown}`)\r\n      console.log(`is legendary: ${legendMeta.isLegendary}`)\r\n      console.log(`is hatched: ${legendMeta.isHatched}`)\r\n      // console.log('GENES:')\r\n      // console.log(`CdR1: ${legendGenetics.CdR1}`)\r\n      // console.log(`CdG1: ${legendGenetics.CdG1}`)\r\n      // console.log(`CdB1: ${legendGenetics.CdB1}`)\r\n      // console.log(`CdR2: ${legendGenetics.CdR2}`)\r\n      // console.log(`CdG2: ${legendGenetics.CdG2}`)\r\n      // console.log(`CdB2: ${legendGenetics.CdB2}`)\r\n      // console.log(`CdR3: ${legendGenetics.CdR3}`)\r\n      // console.log(`CdG3: ${legendGenetics.CdG3}`)\r\n      // console.log(`CdB3: ${legendGenetics.CdB3}`)\r\n      // console.log('STATS:')\r\n      // console.log(`level: ${legendStats.level}`)\r\n      // console.log(`health: ${legendStats.health}`)\r\n      // console.log(`strength: ${legendStats.strength}`)\r\n      // console.log(`defense: ${legendStats.defense}`)\r\n      // console.log(`agility: ${legendStats.agility}`)\r\n      // console.log(`speed: ${legendStats.speed}`)\r\n      // console.log(`accuracy: ${legendStats.accuracy}`)\r\n      // console.log(`destruction: ${legendStats.destruction}`)\r\n    }\r\n  }\r\n  async function fetchGenetics() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const legendGenetics = await contract.nft.read.legendGenetics(id)\r\n      console.log(`Genetics: ${legendGenetics}`)\r\n    }\r\n  }\r\n  async function fetchStats() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const legendStats = await contract.nft.read.legendStats(id)\r\n      console.log(`Stats: ${legendStats}`)\r\n    }\r\n  }\r\n  async function isHatchable() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      legends.forEach((legend) => {\r\n        contract.nft.read.legendMetadata(legend.tokenID).then((legendMeta) => {\r\n          if (!legendMeta.isHatched) {\r\n            const testToggle = true // hatching test toggle\r\n            contract.nft.read.isHatchable(legendMeta.id, testToggle).then((res) => {\r\n              console.log(res.toString())\r\n            })\r\n            console.log(`Legend ${legendMeta.id} is hatched: ${legendMeta.isHatched}`)\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n  async function hatch() {\r\n    await axios.post('http://localhost:3001/api/retrieve', { id }).then((res) => {\r\n      console.log(res.data)\r\n      const hatchedURI = res.data\r\n      contract.nft.write.hatch(id, hatchedURI)\r\n    })\r\n  }\r\n  async function getAllLegends() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      setGettingLegends(true)\r\n      const totalLegends = await contract.nft.read.totalSupply()\r\n      for (let i = 1; i <= totalLegends; i++) {\r\n        contract.nft.read.legendMetadata(i).then((legendMeta) => {\r\n          if (!legendMeta.isDestroyed) {\r\n            loadLegends(legendMeta.id.toString())\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  async function getTokensByOwner() {\r\n    setGettingLegends(true)\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.nft.read.balanceOf(account).then((balance) => {\r\n        if (balance > 0) {\r\n          setGettingLegends(true)\r\n          const legendsData = []\r\n          for (let i = 0; i < balance; i++) {\r\n            contract.nft.read.tokenOfOwnerByIndex(account, i).then((token) => {\r\n              const tokenId = token.toString()\r\n              loadLegends(tokenId).then((res) => {\r\n                legendsData.push(res)\r\n              })\r\n            })\r\n          }\r\n          setLegends(legendsData)\r\n        } else {\r\n          console.log('Account does not own any Legend Tokens')\r\n        }\r\n      })\r\n    }\r\n  }\r\n  async function loadLegends(tokenID) {\r\n    const imgURL = await contract.nft.read.fetchLegendURI(tokenID)\r\n    console.log(`Legend ID: ${tokenID} Image URL: ${imgURL}`)\r\n    return { tokenID, imgURL }\r\n    // Logic for rendering Legend Card Component here from pinata ?\r\n  }\r\n  // Send new NFT Genetics to API/Generator\r\n  async function generateImage(newItemId) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const legend = await contract.nft.read.tokenMeta(newItemId)\r\n      const legendGenetics = await contract.nft.read.legendGenetics(newItemId)\r\n      // TODO: Make into interface(convert js -> ts)\r\n      const legendInterface = {\r\n        id: `${legend.id}`,\r\n        prefix: legend.prefix,\r\n        postfix: legend.postfix,\r\n        genetics: `${legendGenetics}`,\r\n        parents: `${legend.parents}`,\r\n        birthDay: `${legend.birthDay}`,\r\n        incubationDuration: `${legend.incubationDuration}`,\r\n        breedingCooldown: `${legend.breedingCooldown}`,\r\n        breedingCost: `${legend.breedingCost}`,\r\n        offspringLimit: `${legend.offspringLimit}`,\r\n        season: legend.season,\r\n        isLegendary: legend.isLegendary,\r\n        isDestroyed: legend.isDestroyed,\r\n      }\r\n\r\n      // ! recieveing multiple responses in the console\r\n      // console.log('test', legendInterface)\r\n      // console.log('test1', legend)\r\n\r\n      await axios\r\n        .post('http://localhost:3001/api/mint', { legendInterface }) // Use this if your main host is Windows\r\n        // .post('http://192.168.1.157:3001/api/mint', { legendInterface }) // using my laptop to run the generator API\r\n        .then((res) => {\r\n          const url = res.data\r\n          console.log('New NFT IPFS URL:', url)\r\n        })\r\n      // .finally(() => {\r\n      //   document.location.reload()\r\n      // })\r\n    }\r\n  }\r\n  async function breed() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const skipIncubation = false // for testing ; will be linked to accessories from game\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      await contract.nft.write.breed(account, parent1, parent2, skipIncubation).then(\r\n        contract.nft.write.once('NewLegend', (data, event) => {\r\n          const newItemId = data.toString()\r\n          console.log('New Token Created:', newItemId) // Debug logging\r\n          generateImage(newItemId)\r\n        }),\r\n      )\r\n    }\r\n  }\r\n  async function destroy() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.nft.write.destroyLegend(id)\r\n    }\r\n  }\r\n  // Mints Legend with \"random\" Genetics\r\n  async function mintPromo() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const level = 1 // for testing\r\n      const isLegendary = false // for testing\r\n      const skipIncubation = false // for testing\r\n\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      // await contract.nft.write.mintPromo(account, prefix, postfix, isLegendary, skipIncubation).then(\r\n      await contract.nft.write.mintPromo(account, id, isLegendary)\r\n      // .then(\r\n        // // ! receiving multiple responses ?\r\n       // // ? is .then even needed\r\n      //   contract.nft.write.once('NewLegend', (data, event) => {\r\n      //     console.log('New Token Created:', data.toString()) // return token id instead of watching for event\r\n      //     const newItemId = data.toString()\r\n      //     generateImage(newItemId)\r\n      //   }),\r\n      // )\r\n    }\r\n  }\r\n  /**\r\n   * Legend NFT End\r\n   */\r\n\r\n  /**\r\n   * Sale Start\r\n   */\r\n  async function createLegendSale() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.nft.write.approve(legendsMarketplace, id)\r\n\r\n      const price = ethers.utils.parseUnits(sellPrice, 'ether')\r\n      const transaction = await contract.marketplace.write.createLegendSale(legendsNFT, id, price)\r\n      await transaction.wait\r\n      // await contract.marketplace.write.createLegendListing(legendsNFT, id, price).then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  async function buyLegend() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const listing = await contract.marketplace.read.legendListing(id)\r\n      const transaction = await contract.marketplace.write.buyLegend(id, {\r\n        value: listing.price,\r\n      })\r\n      await transaction.wait()\r\n      // .then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  async function cancelLegendSale() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.marketplace.write.cancelLegendListing(id)\r\n      // .then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // }),\r\n      // )\r\n    }\r\n  }\r\n  async function fetchLegendListings() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // const listingCounts = await contract.marketplace.read.fetchListingCounts()\r\n      // const count = listingCounts[0]\r\n      // const b = await contract.marketplace.read.legendListing(1)\r\n      const l = await contract.marketplace.read.legendListing(id)\r\n      const a = await contract.marketplace.read.auctionDetails(id)\r\n      const o = await contract.marketplace.read.offerDetails(id)\r\n\r\n      console.log(`Listing ID: ${l.listingId}`)\r\n      console.log(`Created At: ${l.createdAt}`)\r\n      console.log(`Contract: ${l.nftContract}`)\r\n      console.log(`Legend ID: ${l.legendId}`)\r\n      console.log(`Seller: ${l.seller}`)\r\n      console.log(`Buyer: ${l.buyer}`)\r\n      console.log(`Price: ${l.price}`)\r\n      console.log(`is Auction: ${l.isAuction}`)\r\n      console.log(`is Offer: ${l.isOffer}`)\r\n      if (l.status === 0) {\r\n        console.log('Status: Null')\r\n      } else if (l.status === 1) {\r\n        console.log('Status: Open')\r\n      } else if (l.status === 2) {\r\n        console.log('Status: Closed')\r\n      } else if (l.status === 3) {\r\n        console.log('Status: Cancelled')\r\n      }\r\n      console.log('')\r\n      if (l.isAuction) {\r\n        console.log(`Duration: ${a.duration}`)\r\n        console.log(`Starting Price: ${a.startingPrice}`)\r\n        console.log(`Highest Bid: ${a.highestBid}`)\r\n        console.log(`Highest Bidder: ${a.highestBidder}`)\r\n        console.log(`Bidders: ${a.bidders}`)\r\n        console.log(`Instant Buy: ${a.instantBuy}`)\r\n        console.log('')\r\n      }\r\n      if (l.isOffer) {\r\n        console.log(`Expiration Time: ${o.expirationTime}`)\r\n        console.log(`Legend Owner: ${o.legendOwner}`)\r\n        console.log(`Is Accepted: ${o.isAccepted}`)\r\n        console.log('')\r\n      }\r\n    }\r\n  }\r\n  async function checkPaymentAmount() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      const payment = await contract.marketplace.read.payments(account)\r\n      console.log(payment.toString())\r\n    }\r\n  }\r\n  async function checkOwedBid() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const auction = await contract.marketplace.read.legendListing(id)\r\n      const payment = await contract.marketplace.read.payments(auction.buyer)\r\n      console.log(payment.toString())\r\n    }\r\n  }\r\n  async function claimPayment() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.marketplace.write.claimPayment(id)\r\n    }\r\n  }\r\n  async function claimLegend() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.marketplace.write.claimLegend(id)\r\n    }\r\n  }\r\n  /**\r\n   * Sale End\r\n   */\r\n\r\n  /**\r\n   * Auction Start\r\n   */\r\n\r\n  const approveTransaction = async () => {\r\n    await contract.nft.write.approve(legendsMarketplace, id)\r\n  }\r\n\r\n  async function createLegendAuction() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // await contract.nft.write.approve(legendsMarketplace, id)\r\n\r\n      // const duration = _duration * 86400\r\n      const testDuration = 650 // seconds\r\n      const duration = testDuration\r\n      const startingPrice = ethers.utils.parseUnits(_startingPrice, 'ether')\r\n      const _instantPrice = ethers.utils.parseUnits(instantPrice, 'ether')\r\n      // const instantBuyPrice = ethers.utils.parseUnits(0.005, 'ether') // for testing\r\n      const transaction = await contract.marketplace.write.createLegendAuction(\r\n        legendsNFT,\r\n        id,\r\n        duration,\r\n        startingPrice,\r\n        _instantPrice,\r\n      )\r\n      await transaction.wait()\r\n      // await contract.marketplace.write.createLegendListing(legendsNFT, id, price).then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  async function bidOnLegend() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const auctionBid = ethers.utils.parseUnits(bid, 'ether')\r\n      const transaction = await contract.marketplace.write.placeBid(id, {\r\n        value: auctionBid,\r\n      })\r\n      await transaction.wait\r\n    }\r\n  }\r\n  async function depositsOf() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      const qty = await contract.marketplace.read.payments(account)\r\n      console.log(qty.toString())\r\n    }\r\n  }\r\n  async function withdrawFromAuction() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.marketplace.write.withdrawBid(id)\r\n    }\r\n  }\r\n  async function closeAuction() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.marketplace.write.closeListing(id)\r\n    }\r\n  }\r\n  async function biddys() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const b = await contract.marketplace.read.fetchBidders(id)\r\n      console.log(b)\r\n      console.log(b.length)\r\n    }\r\n  }\r\n  /**\r\n   * Auction End\r\n   */\r\n\r\n  /**\r\n   *  Offer Start\r\n   */\r\n  async function makeLegendOffer() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const price = ethers.utils.parseUnits(sellPrice, 'ether')\r\n      // console.log(price)\r\n      const transaction = await contract.marketplace.write.makeLegendOffer(legendsNFT, id, { value: price })\r\n      await transaction.wait\r\n\r\n      // const price = ethers.utils.parseUnits(sellPrice, 'ether')\r\n      // const transaction = await contract.marketplace.write.createLegendSale(legendsNFT, id, price)\r\n      // await transaction.wait\r\n      // .then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // }),\r\n      // )\r\n    }\r\n  }\r\n  async function acceptLegendOffer() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.nft.write.approve(legendsMarketplace, id)\r\n\r\n      const transaction = await contract.marketplace.write.decideLegendOffer(id, true)\r\n      await transaction.wait\r\n      // await contract.marketplace.write.createLegendListing(legendsNFT, id, price).then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  async function rejectLegendOffer() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const transaction = await contract.marketplace.write.decideLegendOffer(id, false)\r\n      await transaction.wait\r\n      // await contract.marketplace.write.createLegendListing(legendsNFT, id, price).then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  async function claimRoyalties() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const transaction = await contract.marketplace.write.claimRoyalties()\r\n      await transaction.wait\r\n      // await contract.marketplace.write.createLegendListing(legendsNFT, id, price).then(\r\n      // contract.marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // })\r\n    }\r\n  }\r\n  /**\r\n   *  Offer End\r\n   */\r\n\r\n  /**\r\n   * Matching Start\r\n   */\r\n  // const approveTransaction = async () => {\r\n  //   await contract.nft.write.approve(legendsMatchingBoard, id)\r\n  // }\r\n\r\n  async function createLegendMatching() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const create = async () => {\r\n        const price = ethers.utils.parseUnits(matchingPrice, 'ether')\r\n        const transaction = await contract.matchingBoard.write.createLegendMatching(legendsNFT, id, price)\r\n        await transaction.wait\r\n      }\r\n\r\n      approveTransaction().then(() => {\r\n        create()\r\n      })\r\n    }\r\n  }\r\n  async function matchWithLegend() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      // await contract.nft.write.approve(legendsMatchingBoard, breedingToken)\r\n\r\n      // await contract.matchingBoard.write.matchWithLegend(id, breedingToken)\r\n      const matching = await contract.matchingBoard.read.legendMatching(id)\r\n      const amount = matching.price.toString()\r\n      await contract.token.write.approve(legendsMatchingBoard, amount)\r\n    }\r\n  }\r\n  async function cancelLegendMatching() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.matchingBoard.write.cancelLegendMatching(legendsNFT, id)\r\n      // .then(\r\n      // marketplace.write.once('ListingStatusChanged', (data, event) => {\r\n      //   console.log(`data: ${data[0]} ${data[1]}`)\r\n      //   console.log(`event: ${event[0]} ${event[1]}`)\r\n      // }),\r\n      // )\r\n    }\r\n  }\r\n  async function fetchLegendMatchings() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const m = await contract.matchingBoard.read.legendMatching(id)\r\n      console.log(`Match ID: ${m.matchingId}`)\r\n      console.log(`Created At: ${m.createdAt}`)\r\n      console.log(`Contract: ${m.nftContract}`)\r\n      console.log(`Surrogate Token: ${m.surrogateToken}`)\r\n      console.log(`Surrogate: ${m.surrogate}`)\r\n      console.log(`Breeder: ${m.breeder}`)\r\n      console.log(`Breeder Token: ${m.breederToken}`)\r\n      console.log(`Child Id: ${m.childId}`)\r\n      console.log(`Price: ${m.price}`)\r\n      if (m.status === 0) {\r\n        console.log('Status: Null')\r\n      } else if (m.status === 1) {\r\n        console.log('Status: Open')\r\n      } else if (m.status === 2) {\r\n        console.log('Status: Closed')\r\n      } else if (m.status === 3) {\r\n        console.log('Status: Cancelled')\r\n      }\r\n      console.log('')\r\n    }\r\n  }\r\n  async function checkOwedTokens() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const tokensOwed = await contract.matchingBoard.read.checkTokensOwed()\r\n      console.log(tokensOwed.toString())\r\n    }\r\n  }\r\n  async function claimTokens() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.matchingBoard.write.claimTokens()\r\n    }\r\n  }\r\n  async function claimEgg() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.matchingBoard.write.claimEgg(id)\r\n    }\r\n  }\r\n  async function withdrawFromMatching() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.matchingBoard.write.withdrawFromMatching(id)\r\n    }\r\n  }\r\n  async function relistInMatching() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await contract.matchingBoard.write.relistInMatching(id)\r\n    }\r\n  }\r\n  /**\r\n   * Matching End\r\n   */\r\n\r\n  const NftContainer = styled.div`\r\n    & {\r\n      padding: 25px;\r\n      display: inline-flex;\r\n      flex-wrap: wrap;\r\n      width: 100%;\r\n      justify-content: center;\r\n      div {\r\n        margin: 25px;\r\n      }\r\n    }\r\n  `\r\n\r\n  const pinataGeteway = 'https://gateway.pinata.cloud/ipfs/'\r\n\r\n  const cidToUrl = (cid) => {\r\n    return pinataGeteway + cid.split('//')[1].split(',')[0]\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <div>\r\n          <input type=\"number\" placeholder=\"Value\" onChange={(e) => setValue(e.target.value)} />\r\n          <button type=\"submit\" onClick={setIncubationDuration}>\r\n            Set Base Incubation Duration\r\n          </button>\r\n          <button type=\"submit\" onClick={setBreedingCooldown}>\r\n            Set Base Breeding Cooldown\r\n          </button>\r\n          <button type=\"submit\" onClick={setOffspringLimit}>\r\n            Set Offspring Limit\r\n          </button>\r\n          <button type=\"submit\" onClick={setBaseBreedingCost}>\r\n            Set Base Breeding Cost\r\n          </button>\r\n          <br />\r\n          <input type=\"text\" placeholder=\"Season\" onChange={(e) => setSeasonValue(e.target.value)} />\r\n          <button type=\"submit\" onClick={setSeason}>\r\n            Set Season\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <input type=\"text\" placeholder=\"Name\" onChange={(e) => setPromoName(e.target.value)} />\r\n          <button type=\"submit\" onClick={createPromoEvent}>\r\n            Create Promo Event\r\n          </button>\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={closePromoEvent}>\r\n            Close Promo Event\r\n          </button>\r\n          <button type=\"submit\" onClick={fetchPromoDetails}>\r\n            Fetch Promo Details\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Promo ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={dispensePromoTicket}>\r\n            Dispense Promo Ticket\r\n          </button>\r\n          <button type=\"submit\" onClick={redeemPromoTicket}>\r\n            Redeem Promo Ticket\r\n          </button>\r\n          <button type=\"submit\" onClick={fetchRedeemableTickets}>\r\n            Fetch Redeemable Tickets\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <button type=\"submit\" onClick={getTokensByOwner}>\r\n            Print Owned Legend IDs\r\n          </button>\r\n          <button type=\"submit\" onClick={getAllLegends}>\r\n            Print All Legend Ids\r\n          </button>\r\n          <button type=\"submit\" onClick={mintPromo}>\r\n            Mint Promotional NFT\r\n          </button>\r\n        </div>\r\n      <NftContainer>\r\n        {gettingLegends &&\r\n          (legends.length > 0 ? (\r\n            legends.map((legend) => {\r\n              console.log(legends)\r\n              return (\r\n                <NftCard>\r\n                  <h3>Legend ID: {legend.tokenID}</h3>\r\n                  <img width=\"200px\" alt=\"legend\" src={cidToUrl(legend.imgURL)} />\r\n                </NftCard>\r\n              )\r\n            })\r\n          ) : (\r\n            <img alt=\"eater\" src={gif} />\r\n          ))}\r\n      </NftContainer>\r\n        <div>\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={fetchURI}>\r\n            Fetch URI\r\n          </button>\r\n          <button type=\"submit\" onClick={fetchLegendComposition}>\r\n            Fetch Legend Composition\r\n          </button>\r\n          <button type=\"submit\" onClick={fetchGenetics}>\r\n            Fetch IPFS Genetics\r\n          </button>\r\n          <button type=\"submit\" onClick={fetchStats}>\r\n            Fetch Legend Stats\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <input type=\"number\" placeholder=\"Parent 1 Token ID\" onChange={(e) => setParent1(e.target.value)} />\r\n          <input type=\"number\" placeholder=\"Parent 2 Token ID\" onChange={(e) => setParent2(e.target.value)} />\r\n          <button type=\"submit\" onClick={breed}>\r\n            Breed\r\n          </button>\r\n          <br />\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={isHatchable}>\r\n            is Hatchable ?\r\n          </button>\r\n          <button type=\"submit\" onClick={hatch}>\r\n            Hatch Legend\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={destroy}>\r\n            Destroy Legend\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <input type=\"number\" placeholder=\"Sell Price(BSC)\" onChange={(e) => setPrice(e.target.value)} />\r\n          <button type=\"submit\" onClick={createLegendSale}>\r\n            Create Legend Listing\r\n          </button>\r\n          <button type=\"submit\" onClick={makeLegendOffer}>\r\n            Make Legend Offer\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          {/* <input type=\"number\" placeholder=\"Duration Days\" onChange={(e) => setPrice(e.target.value)} /> */}\r\n          <select onChange={(e) => setDuration(e.target.value)}>\r\n            <option>Select Duration</option>\r\n            <option value=\"1\">1 Day</option>\r\n            <option value=\"2\">2 Days</option>\r\n            <option value=\"3\">3 Days</option>\r\n          </select>\r\n          <input type=\"number\" placeholder=\"Starting Price(BSC)\" onChange={(e) => setStartingPrice(e.target.value)} />\r\n          <select onChange={(e) => toggleInstantBuy(e.target.value)}>\r\n            <option>Allow Instant Buy?</option>\r\n            <option value=\"true\">Yes</option>\r\n            <option value=\"false\">No</option>\r\n          </select>\r\n          <input type=\"number\" placeholder=\"Instant Buy Price\" onChange={(e) => setInstantPrice(e.target.value)} />\r\n          <button type=\"submit\" onClick={createLegendAuction}>\r\n            Create Legend Auction\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={fetchLegendListings}>\r\n            Fetch Legend Listings\r\n          </button>\r\n          <button type=\"submit\" onClick={biddys}>\r\n            Fetch Listing Bids\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={buyLegend}>\r\n            Buy Legend\r\n          </button>\r\n          <button type=\"submit\" onClick={acceptLegendOffer}>\r\n            Accept Offer\r\n          </button>\r\n          <button type=\"submit\" onClick={rejectLegendOffer}>\r\n            Reject Offer\r\n          </button>\r\n          <button type=\"submit\" onClick={approveTransaction}>\r\n            Approve Transaction\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <input type=\"number\" placeholder=\"Bid Amount(BSC)\" onChange={(e) => setBid(e.target.value)} />\r\n          <button type=\"submit\" onClick={bidOnLegend}>\r\n            Bid On Legend\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={cancelLegendSale}>\r\n            Cancel Listing\r\n          </button>\r\n          <button type=\"submit\" onClick={withdrawFromAuction}>\r\n            Withdraw Bid From Auction\r\n          </button>\r\n          <br />\r\n          {/* <button type=\"submit\" onClick={depositsOf}>\r\n            Deposited Amount\r\n          </button> */}\r\n          <br />\r\n        </div>\r\n        <div>\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={closeAuction}>\r\n            Close Listing & Claim Output\r\n          </button>\r\n          <br />\r\n          <br />\r\n          <button type=\"submit\" onClick={claimRoyalties}>\r\n            Check Royalties\r\n          </button>\r\n          <button type=\"submit\" onClick={claimRoyalties}>\r\n            Claim Royalties\r\n          </button>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <input type=\"number\" placeholder=\"Matching Price(LGND)\" onChange={(e) => setMatchingPrice(e.target.value)} />\r\n          <button type=\"submit\" onClick={createLegendMatching}>\r\n            Create Legend Matching\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Matching ID\" onChange={(e) => setID(e.target.value)} />\r\n          <input type=\"number\" placeholder=\"Breeding Token ID\" onChange={(e) => setBreedingToken(e.target.value)} />\r\n          <button type=\"submit\" onClick={matchWithLegend}>\r\n            Match With Legend\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Token ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={fetchLegendMatchings}>\r\n            Fetch Legend Matchings\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <button type=\"submit\" onClick={checkPaymentAmount}>\r\n            Check Owed Eggs\r\n          </button>\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={claimEgg}>\r\n            Claim Egg\r\n          </button>\r\n          <br />\r\n          <button type=\"submit\" onClick={checkOwedTokens}>\r\n            Check Owed Tokens\r\n          </button>\r\n          <button type=\"submit\" onClick={claimTokens}>\r\n            Claim Tokens\r\n          </button>\r\n          <br />\r\n          <input type=\"number\" placeholder=\"Listing ID\" onChange={(e) => setID(e.target.value)} />\r\n          <button type=\"submit\" onClick={cancelLegendMatching}>\r\n            Cancel Matching\r\n          </button>\r\n          <button type=\"submit\" onClick={withdrawFromMatching}>\r\n            Withdraw From Matching\r\n          </button>\r\n          <button type=\"submit\" onClick={relistInMatching}>\r\n            Relist In Matching\r\n          </button>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FarmsApp\r\n"],"sourceRoot":""}